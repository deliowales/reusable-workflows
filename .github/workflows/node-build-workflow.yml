name: Build Workflow

env:
  REGISTRY: ghcr.io

on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
      IAM_ROLE:
        required: true
        type: string
    secrets:
      GITHUB_MACHINE_TOKEN:
        required: true
      CD_API_KEY:
        required: true
      CD_SERVER:
        required: true
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: |
          rm -rf .npmrc
          echo "@deliowales:registry=https://npm.pkg.github.com/" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_MACHINE_TOKEN }}" >> .npmrc

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.IAM_ROLE }}
          aws-region: eu-west-1
          role-session-name: GithubAction

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get release info
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_MACHINE_TOKEN }}

      - name: Set Version
        run: echo "PACKAGE_VERSION=${{ steps.get_release.outputs.tag_name }}" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ inputs.SERVICE_NAME }}:$PACKAGE_VERSION .
          docker push $ECR_REGISTRY/${{ inputs.SERVICE_NAME }}:$PACKAGE_VERSION

      - name: Install Octopus CLI üêô
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: '*'

      - name: Package Helm
        run: |
          octo pack --id="${{ inputs.SERVICE_NAME }}.helm" --format="Zip" --version="$PACKAGE_VERSION" --basePath="$GITHUB_WORKSPACE/helm" --outFolder="$GITHUB_WORKSPACE"

      - name: Package Terragrunt
        run: |
          mkdir terragrunt
          mv terraform s3-backend.tpl s3-provider.tpl azurerm-backend.tpl azurerm-provider.tpl -t terragrunt
          octo pack --id="${{ inputs.SERVICE_NAME }}.terragrunt" --format="Zip" --version="$PACKAGE_VERSION" --basePath="$GITHUB_WORKSPACE/terragrunt" --outFolder="$GITHUB_WORKSPACE"

      - name: Push a package to Octopus Deploy üêô
        uses: OctopusDeploy/push-package-action@v1.1.2
        with:
          api_key: ${{ secrets.CD_API_KEY }}
          packages: '${{ inputs.SERVICE_NAME }}.helm.${{ env.PACKAGE_VERSION }}.zip,${{ inputs.SERVICE_NAME }}.terragrunt.${{ env.PACKAGE_VERSION }}.zip'
          server: ${{ secrets.CD_SERVER }}
